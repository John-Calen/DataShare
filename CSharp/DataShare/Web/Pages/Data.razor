@page "/"
@using Microsoft.AspNetCore.Authorization
@using Models
@using System.Text.Json
@using Models.Files
@using Models.Files.Metas
@using Models.Texts
@using System.Security.Claims
@using Web.Components
@attribute [Authorize]

@layout MainStretchedLayout

@inject HttpClient httpClient

<PageTitle>Data</PageTitle>

<div class="col d-flex flex-column h-100">
    <div class="row flex-grow-1 g-3" style="overflow:auto">
        @if (datas is not null)
        {
            @foreach (var model in datas)
            {
                <div class="col-12">
                    @switch (model)
                    {
                        case GetTextModel textModel:
                        {       
                            <TextData Model="@textModel" OnDelete="@OnDataItemDeleted" />
                            break;
                        }

                        case GetFileMetaModel fileMetaModel:
                        {
                            <FileData Model="@fileMetaModel" OnDelete="@OnDataItemDeleted" />
                            break;
                        }
                    }
                </div>
            }
        }
    </div>

    <div class="row flex-shrink-0" style="height:150px">
        <div class="col-12 p-1">
            <textarea class="w-100 h-100" placeholder="enter text" @onkeydown="@OnTextAreaKeyDown" @bind="NewText" @bind:event="oninput"/>
        </div>
    </div>
</div>


@code
{
    private List<IDataModel<Guid>> datas = default!;
    private string NewText = string.Empty;

    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }





    protected override async Task OnInitializedAsync()
    {
        var fileModels = await GetFileModels();
        var textModel = await GetTextModels();

        datas = Array.Empty<IDataModel<Guid>>()
            .Concat(fileModels)
            .Concat(textModel)
            .OrderBy((m) => m.CreatedAt)
            .ToList();

        await base.OnInitializedAsync();
    }

    private async Task<IEnumerable<GetFileMetaModel>> GetFileModels()
    {
        var response = await httpClient.GetAsync("FileData");
        var content = await response.Content.ReadAsStringAsync();
        var models = JsonSerializer.Deserialize<GetFileMetaModel[]>(content)!;

        return models;
    }

    private async Task<IEnumerable<GetTextModel>> GetTextModels()
    {
        var response = await httpClient.GetAsync("TextData");
        var content = await response.Content.ReadAsStringAsync();
        var models = JsonSerializer.Deserialize<GetTextModel[]>(content)!;

        return models;
    }

    private void OnDataItemDeleted(IDataModel<Guid> model)
    {
        datas.Remove(model);
    }

    private async Task OnTextAreaKeyDown(KeyboardEventArgs args)
    {
        if (args.Code is "Enter" && !args.ShiftKey)
        {
            if (! string.IsNullOrWhiteSpace(NewText))
            {
                var model = await CreateTextData(NewText);
                if (model is not null)
                {
                    NewText = string.Empty;
                    datas.Add(model);
                }
            }
        }
    }

    private async Task<GetTextModel?> CreateTextData(string text)
    {
        if (AuthenticationStateTask is null)
            return null;

        var state = await AuthenticationStateTask;
        if (state is null)
            return null;

        var id = state.User.Claims.Single((c) => c.Type is ClaimTypes.NameIdentifier);

        var response = await httpClient.PostAsJsonAsync
        (
            "TextData",
            new CreateTextModel
            {
                OwnerId = long.Parse(id.Value),
                Content = text
            }
        );

        if ( ! response.IsSuccessStatusCode)
            return null;

        var content = await response.Content.ReadAsStringAsync();
        var model = JsonSerializer.Deserialize<GetTextModel>(content);

        return model;
    }
}